{"version":3,"sources":["components/Cell.js","logic/solveSudoku.js","components/Board.js","App.js","reportWebVitals.js","index.js"],"names":["Cell","props","row","col","initialVal","setBoard","useState","val","setVal","useEffect","type","className","maxLength","value","onChange","evt","target","checkIfValid","guess","rowIndex","colIndex","board","includes","i","rowIndex_start","Math","floor","colIndex_start","rowIndex_2","colIndex_2","solveHelper","j","checkIfSolved","JSON","parse","stringify","findNextZero","validGuesses","arrToReturn","num","push","findValidNums","length","recursiveResult","solveSudoku","parseInt","showBoard","actualBoard","Board","initialBoard","getInitialBoard","onSubmit","preventDefault","boardToSolve","rowNum","handleSubmit","id","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7477175a.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\n\nconst Cell = (props) => {\n    const [row, col, initialVal, setBoard] = [props.row, props.col, props.initialVal, props.setBoard];\n    const [val, setVal] = useState(initialVal);\n\n    useEffect(() => {\n        setVal(initialVal);\n    }, [initialVal]);\n\n    // need onChange if you're setting a value attribute. otherwise u can't change the input field\n    return <input type=\"text\" className=\"cell\" maxLength=\"1\" value={val} onChange={(evt) => setVal(evt.target.value)}></input>;\n}\n\nexport default Cell;","const checkIfValid = (guess, rowIndex, colIndex, board) => {\n    // check row\n    const row_vals = board[rowIndex];\n    if (row_vals.includes(guess)) return false;\n\n    // check col\n    for (let i = 0; i < 9; i++) {\n        if (board[i][colIndex] === guess) return false;\n    }\n\n    // check 3x3 box\n    let rowIndex_start = Math.floor(rowIndex / 3) * 3\n    let colIndex_start = Math.floor(colIndex / 3) * 3\n    for (let rowIndex_2 = rowIndex_start; rowIndex_2 < rowIndex_start + 3; rowIndex_2++) {\n        for (let colIndex_2 = colIndex_start; colIndex_2 < colIndex_start + 3; colIndex_2++) {\n            if (board[rowIndex_2][colIndex_2] === guess) return false;\n        }\n    }\n\n    // if is valid\n    return true;\n}\n\nconst findNextZero = (board) => {\n    for (let i = 0; i < 9; i++) {\n        for (let j = 0; j < 9; j++) {\n            if (board[i][j] === 0) return [i, j];\n        }\n    }\n\n    // if no 0 exists anywhere in the board\n    return null;\n}\n\nconst findValidNums = (rowIndex, colIndex, board) => {\n    let arrToReturn = [];\n    for (let num = 1; num <= 9; num++) {\n        if (checkIfValid(num, rowIndex, colIndex, board)) arrToReturn.push(num);\n    }\n    return arrToReturn;\n}\n\nconst checkIfSolved = (board) => {\n    for (let i = 0; i < 9; i++) {\n        for (let j = 0; j < 9; j++) {\n            if (board[i][j] === 0) return false;\n        }\n    }\n    return true;\n}\n\nconst solveHelper = (board) => {\n    board = JSON.parse(JSON.stringify(board));\n\n    // Base case: if sudoku is solved, then return the board\n    if (checkIfSolved(board)) return board;\n\n    const [rowIndex, colIndex] = findNextZero(board);\n\n    let validGuesses = findValidNums(rowIndex, colIndex, board);\n\n    // Base case: if there are no valid guesses, then puzzle can't be solved\n    if (validGuesses.length === 0) return null;\n\n    // recursively call solveHelper with the valid guess included in the board\n    for (let i = 0; i < validGuesses.length; i++) {\n        board[rowIndex][colIndex] = validGuesses[i];\n        let recursiveResult = solveHelper(board);\n\n        if (recursiveResult != null) {  // if the guess eventually leads to a solution\n            return recursiveResult;\n        }\n        // else try again with next guess\n    }\n\n    // if none of the guesses lead to a solution\n    return null;\n}\n\nconst solveSudoku = (board) => {\n    for (let i = 0; i < 9; i++) {\n        for (let j = 0; j < 9; j++) {\n            board[i][j] = parseInt(board[i][j]);\n        }\n    }\n\n    return solveHelper(board);\n}\n\nexport default solveSudoku;","import React, { useEffect, useState } from 'react';\nimport Cell from './Cell';\nimport solveSudoku from '../logic/solveSudoku';\n\nconst getInitialBoard = () => {\n    let initialBoard = [[], [], [], [], [], [], [], [], []];\n\n    for (let row = 0; row < 9; row++) {\n        for (let col = 0; col < 9; col++) {\n            initialBoard[row][col] = 0;\n        }\n    }\n\n    return initialBoard;\n}\n\nconst showBoard = (board, setBoard) => {\n    let actualBoard = [[], [], [], [], [], [], [], [], []]\n\n    for (let row = 0; row < 9; row++) {\n        for (let col = 0; col < 9; col++) {\n            actualBoard[row][col] = <Cell row={row} col={col} initialVal={board[row][col]} setBoard={setBoard} />\n        }\n    }\n\n    for (let row = 0; row < 9; row++) {\n        actualBoard[row] = <div>{actualBoard[row]}</div>\n    }\n\n    return actualBoard;\n}\n\nconst handleSubmit = (evt, setBoard) => {\n    evt.preventDefault();\n\n    let boardToSolve = [[], [], [], [], [], [], [], [], []];\n\n    for (let i = 0; i < 81; i++) {\n        let rowNum = Math.floor(i / 9);\n        boardToSolve[rowNum][i - 9 * rowNum] = evt.target[i].value;\n    }\n\n    setBoard(solveSudoku(boardToSolve));\n}\n\nconst Board = () => {\n    const [board, setBoard] = useState(getInitialBoard());\n\n    return (\n        <form onSubmit={(evt) => handleSubmit(evt, setBoard)}>\n            <div>{showBoard(board, setBoard)}</div>\n            <button type=\"submit\" id=\"submitButton\">Submit</button>\n        </form >\n    );\n}\n\nexport default Board;","import './App.css';\nimport Board from './components/Board';\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <h1>Sudoku Solver!</h1>\n            <Board />\n        </div >\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}