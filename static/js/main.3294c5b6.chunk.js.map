{"version":3,"sources":["components/Cell.js","logic/solveSudoku.js","components/Board.js","App.js","reportWebVitals.js","index.js"],"names":["Cell","props","initialVal","bgColor","className","color","useState","val","setVal","useEffect","style","backgroundColor","type","maxLength","value","onChange","evt","target","checkIfValid","guess","rowIndex","colIndex","board","includes","i","rowIndex_start","Math","floor","colIndex_start","rowIndex_2","colIndex_2","findNextZero","j","findValidNums","arrToReturn","num","push","checkIfSolved","solveHelper","setBoard","a","Promise","resolve","setTimeout","JSON","parse","stringify","validGuesses","length","recursiveResult","solveSudoku","parseInt","showBoard","actualBoard","row","col","toString","handleSubmit","preventDefault","boardToSolve","rowNum","isNaN","alert","solvedBoard","Board","initialBoard","getInitialBoard","onSubmit","onClick","window","location","reload","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3294c5b6.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\n\nconst Cell = (props) => {\n    const [initialVal, color, className] = [props.initialVal, props.bgColor, props.className];\n    const [val, setVal] = useState(initialVal);\n\n    useEffect(() => {\n        setVal(initialVal);\n    }, [initialVal]);\n\n    // need onChange if you're setting a value attribute. otherwise u can't change the input field\n    return <input style={{\n        backgroundColor: color\n    }} type=\"text\" className={\"cell \" + className} maxLength=\"1\" value={val} onChange={(evt) => setVal(evt.target.value)}></input >;\n}\n\nexport default Cell;","const checkIfValid = (guess, rowIndex, colIndex, board) => {\n    // check row\n    const row_vals = board[rowIndex];\n    if (row_vals.includes(guess)) return false;\n\n    // check col\n    for (let i = 0; i < 9; i++) {\n        if (board[i][colIndex] === guess) return false;\n    }\n\n    // check 3x3 box\n    let rowIndex_start = Math.floor(rowIndex / 3) * 3\n    let colIndex_start = Math.floor(colIndex / 3) * 3\n    for (let rowIndex_2 = rowIndex_start; rowIndex_2 < rowIndex_start + 3; rowIndex_2++) {\n        for (let colIndex_2 = colIndex_start; colIndex_2 < colIndex_start + 3; colIndex_2++) {\n            if (board[rowIndex_2][colIndex_2] === guess) return false;\n        }\n    }\n\n    // if is valid\n    return true;\n}\n\nconst findNextZero = (board) => {\n    for (let i = 0; i < 9; i++) {\n        for (let j = 0; j < 9; j++) {\n            if (board[i][j] === 0) return [i, j];\n        }\n    }\n\n    // if no 0 exists anywhere in the board\n    return null;\n}\n\nconst findValidNums = (rowIndex, colIndex, board) => {\n    let arrToReturn = [];\n    for (let num = 1; num <= 9; num++) {\n        if (checkIfValid(num, rowIndex, colIndex, board)) arrToReturn.push(num);\n    }\n    return arrToReturn;\n}\n\nconst checkIfSolved = (board) => {\n    for (let i = 0; i < 9; i++) {\n        for (let j = 0; j < 9; j++) {\n            if (board[i][j] === 0) return false;\n        }\n    }\n    return true;\n}\n\nconst delay = () => {\n    return new Promise(resolve => {\n        setTimeout(() => {\n            resolve('resolved');\n        }, 10);\n    });\n}\n\nconst solveHelper = async (board, setBoard) => {\n    await delay();\n\n    board = JSON.parse(JSON.stringify(board));\n    setBoard(board);\n\n    // Base case: if sudoku is solved, then return the board\n    if (checkIfSolved(board)) return board;\n\n    const [rowIndex, colIndex] = findNextZero(board);\n\n    let validGuesses = findValidNums(rowIndex, colIndex, board);\n\n    // Base case: if there are no valid guesses, then puzzle can't be solved\n    if (validGuesses.length === 0) return null;\n\n    // recursively call solveHelper with the valid guess included in the board\n    for (let i = 0; i < validGuesses.length; i++) {\n        board[rowIndex][colIndex] = validGuesses[i];\n        let recursiveResult = await solveHelper(board, setBoard);\n\n        if (recursiveResult != null) {  // if the guess eventually leads to a solution\n            return recursiveResult;\n        }\n        // else try again with next guess\n    }\n\n    // if none of the guesses lead to a solution\n    return null;\n}\n\nconst solveSudoku = async (board, setBoard) => {\n    for (let i = 0; i < 9; i++) {\n        for (let j = 0; j < 9; j++) {\n            board[i][j] = parseInt(board[i][j]);\n        }\n    }\n\n    return await solveHelper(board, setBoard);\n}\n\nexport {\n    solveSudoku, checkIfSolved, checkIfValid\n};","import React, { useState } from 'react';\nimport Cell from './Cell';\nimport { solveSudoku, checkIfSolved } from '../logic/solveSudoku';\n\nconst getInitialBoard = () => {\n    let initialBoard = [[], [], [], [], [], [], [], [], []];\n\n    for (let row = 0; row < 9; row++) {\n        for (let col = 0; col < 9; col++) {\n            initialBoard[row][col] = 0;\n        }\n    }\n\n    return initialBoard;\n}\n\nconst showBoard = (board, setBoard) => {\n    let actualBoard = [[], [], [], [], [], [], [], [], []]\n\n    // probably not very efficient to call checkIfSolved() on every showBoard()\n    if (checkIfSolved(board)) {\n        for (let row = 0; row < 9; row++) {\n            for (let col = 0; col < 9; col++) {\n                actualBoard[row][col] = <Cell bgColor=\"#77dd77\" key={row.toString() + \", \" + col.toString()} className=\"item\" initialVal={board[row][col]} />\n            }\n        }\n    } else {\n        for (let row = 0; row < 9; row++) {\n            for (let col = 0; col < 9; col++) {\n                actualBoard[row][col] = <Cell key={row.toString() + \", \" + col.toString()} className=\"cell\" initialVal={board[row][col]} />\n            }\n        }\n    }\n\n    for (let row = 0; row < 9; row++) {\n        actualBoard[row] = <div className=\"row\" key={row}>{actualBoard[row]}</div>\n    }\n\n    return actualBoard;\n}\n\nconst handleSubmit = async (evt, setBoard) => {\n    evt.preventDefault();\n\n    let boardToSolve = [[], [], [], [], [], [], [], [], []];\n\n    // boardToSolve <- input\n    for (let i = 0; i < 81; i++) {\n        let rowNum = Math.floor(i / 9);\n        boardToSolve[rowNum][i - 9 * rowNum] = evt.target[i].value;\n    }\n\n    for (let row = 0; row < 9; row++) {\n        for (let col = 0; col < 9; col++) {\n            let guess = parseInt(boardToSolve[row][col]);\n\n            if (isNaN(guess)) {\n                alert(\"Please enter digits. For empty cells, please enter '0'.\");\n                return;\n            }\n        }\n    }\n\n    let solvedBoard = await solveSudoku(boardToSolve, setBoard);\n    setBoard(solvedBoard);\n}\n\nconst Board = () => {\n    const [board, setBoard] = useState(getInitialBoard());\n\n    return (\n        <form onSubmit={(evt) => handleSubmit(evt, setBoard)}>\n            <div className=\"container\">{showBoard(board, setBoard)}</div>\n            <button type=\"submit\" className=\"button\">Solve</button>\n            <button type=\"button\" className=\"button\" onClick={() => window.location.reload()}>Reset</button>\n        </form >\n    );\n}\n\nexport default Board;","import './App.css';\nimport Board from './components/Board';\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <h1>Sudoku Solver!</h1>\n            <Board />\n        </div >\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}